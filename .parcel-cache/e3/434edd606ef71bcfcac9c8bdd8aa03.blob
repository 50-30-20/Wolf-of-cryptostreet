{"mappings":"gBACIA,MAMAC,EAAAA,IAAeC,OAAOC,MAAAA,CAEtBC,QAASF,OAAOG,MAEhBC,WAEA,WAEIJ,OAAOG,MAAME,KAAKC,KAAA,CAAQC,IAAK,cAanCC,QAAAA,WAEIF,KAAKG,KAAKC,MAAM,SAAU,yBAC1BJ,KAAKG,KAAKE,iBAAiB,SAAU,yBAErCL,KAAKG,KAAKG,MAAM,MAAO,iBAAkB,oBAS7CC,OAAAA,iBAEUC,EAAMR,KAAKS,KAAKC,QAAAA,CAAUT,IAAK,WAC/BU,EAAUH,EAAII,gBAAgB,aAAa,UAGjDJ,EAAIK,YAAY,eAAA,CAAgBF,UAC1BG,EAAYN,EAAIK,YAAY,YAAA,CAAaF,IAE/CG,EAAUC,uBAAAA,CAAyBC,UAAU,IAO7ChB,KAAKiB,QAAQC,IAAIC,SAASnB,KAAKoB,IAAKN,GAGpCtB,EAAUQ,KAAKqB,MAAMC,SAASC,mBAEAC,IAAAA,GAAAA,EA8BTxB,KAAKwB,OA7BhBjB,OAAAA,CACFN,IAAK,eACLwB,OAAQD,EAAME,mBAAmB,MAAA,CAASC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,cAAeC,OAAQ,SAC3FC,QAAS,EACTC,UAAW,IAGfR,EAAMjB,OAAAA,CACFN,IAAK,aACLwB,OAAQD,EAAME,mBAAmB,MAAA,CAASC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,iBAAkBC,OAAQ,SAC9FC,QAAS,EACTC,UAAW,IAGfR,EAAMjB,OAAAA,CACFN,IAAK,eACLwB,OAAQD,EAAME,mBAAmB,MAAA,CAASC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,mBAAoBC,OAAQ,SAChGC,QAAS,EACTC,UAAW,IAGfR,EAAMjB,OAAAA,CACFN,IAAK,gBACLwB,OAAQD,EAAME,mBAAmB,MAAA,CAASC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,oBAAqBC,OAAQ,SACjGC,QAAS,EACTC,UAAW,KAiHvBC,OAAAA,WAEQzC,EAAQ0C,KAAKC,QACbnC,KAAKoB,IAAIgB,aAAa,IAAK,GAC3BpC,KAAKoB,IAAII,MAAMa,KAAK,gBAAgB,IAE/B7C,EAAQ8C,MAAMH,QACnBnC,KAAKoB,IAAIgB,YAAY,IAAK,GAC1BpC,KAAKoB,IAAII,MAAMa,KAAK,iBAAiB,IAEhC7C,EAAQ+C,GAAGJ,QAChBnC,KAAKoB,IAAIgB,YAAY,GAAI,KACzBpC,KAAKoB,IAAII,MAAMa,KAAK,cAAc,IAE7B7C,EAAQgD,KAAKL,QAClBnC,KAAKoB,IAAIgB,YAAY,EAAG,KACxBpC,KAAKoB,IAAII,MAAMa,KAAK,gBAAgB,KAGpCrC,KAAKoB,IAAIgB,YAAY,GACrBpC,KAAKoB,IAAII,MAAMiB,WAKvBC,EAAAA,CACAC,KAAMjD,OAAOkD,MACbC,MAAO,KACPC,OAAQ,KACRC,OAAQ,iBACRC,MAAAA,CAASvD,GACTwB,QAAAA,CACIgC,QAAS,WAIbC,IAAWxD,OAAOyD,KAAKT","sources":["./js/breakout.js"],"sourcesContent":["\r\nvar cursors;\r\nvar _health = 3\r\nvar boy;\r\nvar bman;\r\nlet speed = 150;\r\n\r\nvar Breakout = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n\r\n    initialize:\r\n\r\n    function Breakout ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'breakout' });\r\n        \r\n        // this.bricks;\r\n        // this.paddle;\r\n        // this.ball;\r\n    },\r\n\r\n// class Breakout extends Phaser.Scene{\r\n//     constructor(){\r\n//         super();\r\n//     }\r\n\r\n\r\n    preload()\r\n    {\r\n        this.load.image('assets', 'assets/officetile.png')\r\n        this.load.tilemapTiledJSON('office', 'assets/officemap.json')\r\n\r\n        this.load.atlas('boy', 'assets/boy.png', 'assets/boy.json')\r\n\r\n        // this.load.image('bman', 'assets/businessman_anims_f1 (1).png')\r\n        \r\n        // this.load.image('bman2', 'assets/businessman_anims_f0.png')\r\n        \r\n        // this.load.atlas('assets', 'assets/breakout.png', 'assets/breakout.json');\r\n    },\r\n\r\n    create()\r\n    {\r\n        const map = this.make.tilemap({ key: 'office'})\r\n        const tileset = map.addTilesetImage('officeroom','assets')\r\n        //  Enable world bounds, but disable the floor\r\n        //this.physics.world.setBoundsCollision(true, true, true, false);\r\n        map.createLayer('Tile Layer 1',[tileset])\r\n        const computers = map.createLayer('computers',[tileset])\r\n\r\n        computers.setCollisionByProperty({ collides: true });\r\n\r\n\r\n        // this.boy = this.physics.add.sprite(40, 330, 'boy')\r\n        // this.bman = this.physics.add.image(140, 210, 'bman')\r\n        // this.bman2 = this.physics.add.image(240, 310, 'bman2')\r\n\r\n        this.physics.add.collider(this.boy, computers)\r\n        // this.physics.add.collider(this.boy, this.bman)\r\n        \r\n        cursors = this.input.keyboard.createCursorKeys();\r\n\r\n        const createCharacterAnims = (anims) => {\r\n            anims.create({\r\n                key: 'boy-run-down',\r\n                frames: anims.generateFrameNames('boy', { start: 0, end: 3, prefix: 'boy_anims_f', suffix: '.png' }),\r\n                repeat: -1,\r\n                frameRate: 8\r\n            })\r\n        \r\n            anims.create({\r\n                key: 'boy-run-up',\r\n                frames: anims.generateFrameNames('boy', { start: 0, end: 3, prefix: 'boy_anims_up_f', suffix: '.png' }),\r\n                repeat: -1,\r\n                frameRate: 8\r\n            })\r\n        \r\n            anims.create({\r\n                key: 'boy-run-left',\r\n                frames: anims.generateFrameNames('boy', { start: 0, end: 3, prefix: 'boy_anims_left_f', suffix: '.png' }),\r\n                repeat: -1,\r\n                frameRate: 8\r\n            })\r\n        \r\n            anims.create({\r\n                key: 'boy-run-right',\r\n                frames: anims.generateFrameNames('boy', { start: 0, end: 3, prefix: 'boy_anims_right_f', suffix: '.png' }),\r\n                repeat: -1,\r\n                frameRate: 8\r\n            })\r\n        }\r\n\r\n        createCharacterAnims(this.anims)\r\n\r\n        //  Create the bricks in a 10x6 grid\r\n        // this.bricks = this.physics.add.staticGroup({\r\n        //     key: 'assets', frame: [ 'blue1', 'red1', 'green1', 'yellow1', 'silver1', 'purple1' ],\r\n        //     frameQuantity: 10,\r\n        //     gridAlign: { width: 10, height: 6, cellWidth: 64, cellHeight: 32, x: 112, y: 100 }\r\n        // });\r\n\r\n    //     this.ball = this.physics.add.image(400, 500, 'assets', 'ball1').setCollideWorldBounds(true).setBounce(1);\r\n    //     this.ball.setData('onPaddle', true);\r\n\r\n    //     this.paddle = this.physics.add.image(400, 550, 'assets', 'paddle1').setImmovable();\r\n\r\n    //     //  Our colliders\r\n    //     this.physics.add.collider(this.ball, this.bricks, this.hitBrick, null, this);\r\n    //     this.physics.add.collider(this.ball, this.paddle, this.hitPaddle, null, this);\r\n\r\n        //  Input events\r\n        // this.input.on('pointermove', function (pointer) {\r\n\r\n        //     //  Keep the paddle within the game\r\n        //     this.boy.x = Phaser.Math.Clamp(pointer.x, 52, 748);\r\n\r\n        //     this.boy.anims.play('boy-run-up', true)\r\n\r\n        //     // if (this.boy.getData('onPaddle'))\r\n        //     // {\r\n        //     //     this.boy.x = this.boy.x;\r\n        //     // }\r\n\r\n        // }, this);\r\n\r\n        // this.input.on('pointermove', function (pointer) {\r\n\r\n        //     this.boy.y = Phaser.Math.Clamp(pointer.y, 52, 748);\r\n\r\n        //     // if (_health > 0) {\r\n        //     //     speed\r\n        //     //     if (pointer) {\r\n        //             this.boy.anims.play('boy-run-left', true)\r\n                //     this.boy.setVelocity(-speed, 0)\r\n    \r\n                //     this.boy.scaleX = -1\r\n                //     this.boy.body.offset.x = 24\r\n                // }}\r\n\r\n            // if (this.ball.getData('onPaddle'))\r\n            // {\r\n            //     this.ball.setVelocity(-75, -300);\r\n            //     this.ball.setData('onPaddle', false);\r\n            // }\r\n\r\n        // }, this);\r\n    // },\r\n\r\n    // hitBrick: function (ball, brick)\r\n    // {\r\n    //     brick.disableBody(true, true);\r\n\r\n    //     if (this.bricks.countActive() === 0)\r\n    //     {\r\n    //         this.resetLevel();\r\n    //     }\r\n    // },\r\n\r\n    // resetBall: function ()\r\n    // {\r\n    //     this.ball.setVelocity(0);\r\n    //     this.ball.setPosition(this.paddle.x, 500);\r\n    //     this.ball.setData('onPaddle', true);\r\n    // },\r\n\r\n    // resetLevel: function ()\r\n    // {\r\n    //     this.resetBall();\r\n\r\n    //     this.bricks.children.each(function (brick) {\r\n\r\n    //         brick.enableBody(false, 0, 0, true, true);\r\n\r\n    //     });\r\n    // },\r\n\r\n    // hitPaddle: function (ball, paddle)\r\n    // {\r\n    //     var diff = 0;\r\n\r\n    //     if (ball.x < paddle.x)\r\n    //     {\r\n    //         //  Ball is on the left-hand side of the paddle\r\n    //         diff = paddle.x - ball.x;\r\n    //         ball.setVelocityX(-10 * diff);\r\n    //     }\r\n    //     else if (ball.x > paddle.x)\r\n    //     {\r\n        //     //  Ball is on the right-hand side of the paddle\r\n        //     diff = ball.x -paddle.x;\r\n        //     ball.setVelocityX(10 * diff);\r\n        // }\r\n        // else\r\n        // {\r\n        //     //  Ball is perfectly in the middle\r\n        //     //  Add a little random X to stop it bouncing straight up!\r\n        //     ball.setVelocityX(2 + Math.random() * 8);\r\n        // }\r\n        \r\n    },\r\n\r\n    update()\r\n    {   \r\n        if (cursors.left.isDown){\r\n            this.boy.setVelocity(-160, 0);\r\n            this.boy.anims.play('boy-run-left', true)\r\n        } \r\n        else if (cursors.right.isDown){\r\n            this.boy.setVelocity(160, 0);\r\n            this.boy.anims.play('boy-run-right', true)\r\n        }\r\n        else if (cursors.up.isDown){\r\n            this.boy.setVelocity(0, -160);\r\n            this.boy.anims.play('boy-run-up', true)\r\n        }\r\n        else if (cursors.down.isDown){\r\n            this.boy.setVelocity(0, 160);\r\n            this.boy.anims.play('boy-run-down', true)\r\n        }\r\n        else {\r\n            this.boy.setVelocity(0);\r\n            this.boy.anims.stop();\r\n        }        \r\n    }\r\n});\r\n\r\nvar config = {\r\n    type: Phaser.WEBGL,\r\n    width: 1700,\r\n    height: 1400,\r\n    parent: 'phaser-example',\r\n    scene: [ Breakout ],\r\n    physics: {\r\n        default: 'arcade'\r\n    }\r\n};\r\n\r\nvar game = new Phaser.Game(config);\r\n"],"names":["$80c73d59159b496d32a374bb4d130753$var$cursors","$80c73d59159b496d32a374bb4d130753$var$Breakout","Phaser","Class","Extends","Scene","initialize","call","this","key","preload","load","image","tilemapTiledJSON","atlas","create","map","make","tilemap","tileset","addTilesetImage","createLayer","computers","setCollisionByProperty","collides","physics","add","collider","boy","input","keyboard","createCursorKeys","anims","frames","generateFrameNames","start","end","prefix","suffix","repeat","frameRate","update","left","isDown","setVelocity","play","right","up","down","stop","$80c73d59159b496d32a374bb4d130753$var$config","type","WEBGL","width","height","parent","scene","default","$80c73d59159b496d32a374bb4d130753$var$game","Game"],"version":3,"file":"index.HASH_REF_b42228207e93377929f86b3a6899a59c.js.map"}